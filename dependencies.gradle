//file:noinspection DependencyNotationArgument
// TODO remove when fixed in RFG ^
/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *       For more info, see https://github.com/GregTechCEu/Buildscripts/blob/master/docs/shadow.md
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * To add a mod with CurseMaven, replace '("g:n:v:c")' in the above with 'rfg.deobf("curse.maven:project_slug-project_id:file_id")'
 * Example: devOnlyNonPublishable(rfg.deobf("curse.maven:top-245211:2667280"))
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.4/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {

    // An susy-core env
    // CCL 3.2.3.358
    implementation rfg.deobf('curse.maven:codechicken-lib-1-8-242818:2779848')
    // GTCEu 2.8.7 beta
    implementation rfg.deobf("curse.maven:gregtech-ce-unofficial-557242:5121638-deobf-5121638-sources-5121638")
    // GCYM 1.2.8
    implementation rfg.deobf('curse.maven:gregicality-multiblocks-564858:5121714-deobf-5121714-sources-5121714')
    // SUSY 0.1.17
    implementation rfg.deobf("curse.maven:susycore-846224:5172970")
    // GTFO 1.11.1
    implementation rfg.deobf("curse.maven:gregtech-food-option-477021:5155451")
    // MUI 2.4.3
    implementation rfg.deobf("curse.maven:modularui-624243:5153413")
    // HEI 4.25.2
    //implementation rfg.deobf("curse.maven:had-enough-items-557549:5154770") why???

    // AE2UEL 0.55.6 (transitive gt dep)
    compileOnly rfg.deobf("curse.maven:ae2-extended-life-570458:4402048")

    //GeckoLib
    implementation rfg.deobf('curse.maven:geckolib-388172:4020277')

    implementation rfg.deobf('curse.maven:realistic-terrain-generation-unofficial-648514:4404814')

    compileOnly rfg.deobf('curse.maven:biomes-o-plenty-220318:2842510')



    implementation rfg.deobf('curse.maven:applecore-224472:2969118')

    implementation rfg.deobf("curse.maven:no-tree-punching-289043:2983385") // No-tree-punching v2.0.21
    implementation rfg.deobf("curse.maven:alcatrazcore-304493:2666560") // AlcatrazCore v1.0.4


    implementation rfg.deobf("curse.maven:universal-mod-core-371784:3654955") // Universal-Mod-Care v1.1.4
    implementation rfg.deobf("curse.maven:track-api-282613:2825260") // Track-API v1.2.0

    implementation rfg.deobf("curse.maven:immersive-railroading-277736:3437738") // Immersive-Railroading v1.9.1

    implementation rfg.deobf("curse.maven:ctm-267602:2915363") // CTM 1.0.2.31
    implementation rfg.deobf("curse.maven:groovyscript-687577:4991701") // GRS 0.7.3
    implementation rfg.deobf("curse.maven:mixin-booter-419286:5079135")

    // Cool stuff
    implementation 'org.openscience.cdk:cdk-bundle:2.9'
    devOnlyNonPublishable(rfg.deobf(project.files("lib/openbabel.jar")))
}
